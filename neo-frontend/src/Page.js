import { wallet } from '@cityofzion/neon-js';
import { WalletNotConnectedError, WitnessScope } from '@rentfuse-labs/neo-wallet-adapter-base';
import { useWallet } from '@rentfuse-labs/neo-wallet-adapter-react';
import { WalletDisconnectButton, WalletMultiButton } from '@rentfuse-labs/neo-wallet-adapter-react-ui';
import { useState, useCallback, useEffect } from 'react';

export const Page = () => {
    const { address, connected, getNetworks, invoke } = useWallet();

    const [walletNetwork, setWalletNetwork] = useState(null);

    const fetchWalletNetwork = useCallback(async () => {
        try {
            const result = await getNetworks();
            if (result.status === 'success') {
                setWalletNetwork(result.data?.defaultNetwork || null);
            }
        } catch (error) {
            console.error(error);
        }
    }, [getNetworks]);

    useEffect(() => {
        if (connected) {
            fetchWalletNetwork();
        } else {
            setWalletNetwork(null);
        }
    }, [connected, fetchWalletNetwork]);

    console.log(walletNetwork);

    const sendLudium = useCallback(async () => {
        if (!address || !connected) throw new WalletNotConnectedError();

        // Construct the request and invoke it
        const result = await invoke({
            scriptHash: 'ca3d9ddbc153c11dbd1abc0ff55e25b9fdcdbce3',
            operation: 'transfer',
            args: [
                { type: 'Hash160', value: wallet.getScriptHashFromAddress(address) },
                { type: 'Hash160', value: wallet.getScriptHashFromAddress('NQTXKjcXZq3XiaB2Ban4pS66gPDX7dWyX8') },
                { type: 'Integer', value: 100000000 },
                { type: 'Array', value: [] },
            ],
            signers: [{ account: wallet.getScriptHashFromAddress(address), scopes: WitnessScope.CalledByEntry }],
        });

        // Optional: Wait for the transaction to be confirmed onchain
        if (result.data?.txId) {
            // await waitTx('NETWORK_RPC_ADDRESS_HERE', result.data?.txId);
        }
    }, [address, connected, invoke]);

    return <>
        <div className={'container'}>
            <head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </head>
            <main className={'main'}>
                <h1 className={'title'}>
                    Welcome to Ludium Transfer
                </h1>

                <div className={'wallet-buttons'}>
                    <WalletMultiButton />
                    <WalletDisconnectButton />
                </div>

                <button onClick={sendLudium} disabled={!address || !connected}>
                    {'Send 1 Ludium!'}
                </button>
            </main>

            <footer className={'footer'}>
            </footer>
        </div>
    </>
}